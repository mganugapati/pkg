// NOTE: AUTO-GENERATED by midc, DON'T edit!!

package landlord

import (
	"fmt"

	"github.com/mkideal/pkg/storage"
	"github.com/mkideal/pkg/typeconv"
	"gopkg.in/redis.v5"
)

var (
	_ = fmt.Printf
	_ = storage.Unused
	_ = typeconv.Unused
	_ = redis.Nil
)

func Init(eng storage.Engine) {
}

type Category int

const (
	Category_Solo                       Category = 1
	Category_Pair                       Category = 2
	Category_Trio                       Category = 3
	Category_Four                       Category = 4
	Category_Chain                      Category = 5
	Category_PairsChain                 Category = 6
	Category_TrioWithSingleCard         Category = 7
	Category_TrioWithPair               Category = 8
	Category_Airplain                   Category = 9
	Category_AirplainWithSmallWings     Category = 10
	Category_AirplainWithLargeWings     Category = 11
	Category_FourUithTwoSingleCards     Category = 12
	Category_FourUithTwoPairs           Category = 13
	Category_SpaceShuttle               Category = 14
	Category_SpaceShuttleWithSmallWings Category = 15
	Category_SpaceShuttleWithLargeWings Category = 16
	Category_Bomb                       Category = 17
	Category_Rocket                     Category = 18
)

type Stage int

const (
	Stage_Ready  Stage = 0
	Stage_Bid    Stage = 1
	Stage_Double Stage = 2
	Stage_Play   Stage = 3
)

type Hands struct {
	Valid      bool
	Category   Category
	Value      int8
	LastPokers []uint8
}

type Landlord3PlayerState struct {
	Id         int64
	Pos        int8
	IsLandlord bool
	Pokers     []uint8
	Multiple   int32
	BidScore   int8
	Revealed   bool
}

// Table

type Landlord3State struct {
	Uuid              string                 `xorm:"pk TEXT"`
	Playing           int32                  `xorm:"INT(10)"`
	LeftoverWildCards []uint8                `xorm:"TEXT"`
	FirstLandlordPos  int8                   `xorm:"INT(4)"`
	Stage             Stage                  `xorm:"TEXT"`
	FirstBider        int8                   `xorm:"INT(4)"`
	Turn              int8                   `xorm:"INT(4)"`
	Landlord          int8                   `xorm:"INT(4)"`
	Doubled           []int8                 `xorm:"TEXT"`
	LastPos           int8                   `xorm:"INT(4)"`
	LastHands         Hands                  `xorm:"TEXT"`
	Players           []Landlord3PlayerState `xorm:"TEXT"`
}

func NewLandlord3State() *Landlord3State {
	return &Landlord3State{}
}

func (Landlord3State) Meta() Landlord3StateMeta     { return landlord3StateMetaVar }
func (Landlord3State) TableMeta() storage.TableMeta { return landlord3StateMetaVar }
func (x Landlord3State) Key() interface{}           { return x.Uuid }
func (x *Landlord3State) SetKey(value string) error {
	x.Uuid = value
	return nil
}

func (x Landlord3State) GetField(field string) (interface{}, bool) {
	switch field {
	case landlord3StateMetaVar.F_playing:
		return x.Playing, true
	case landlord3StateMetaVar.F_leftover_wild_cards:
		return x.LeftoverWildCards, true
	case landlord3StateMetaVar.F_first_landlord_pos:
		return x.FirstLandlordPos, true
	case landlord3StateMetaVar.F_stage:
		return x.Stage, true
	case landlord3StateMetaVar.F_first_bider:
		return x.FirstBider, true
	case landlord3StateMetaVar.F_turn:
		return x.Turn, true
	case landlord3StateMetaVar.F_landlord:
		return x.Landlord, true
	case landlord3StateMetaVar.F_doubled:
		return x.Doubled, true
	case landlord3StateMetaVar.F_last_pos:
		return x.LastPos, true
	case landlord3StateMetaVar.F_last_hands:
		return x.LastHands, true
	case landlord3StateMetaVar.F_players:
		return x.Players, true
	}
	return nil, false
}

func (x *Landlord3State) SetField(field, value string) error {
	switch field {
	case landlord3StateMetaVar.F_playing:
		return typeconv.String2Int32(&x.Playing, value)
	case landlord3StateMetaVar.F_leftover_wild_cards:
		if x.LeftoverWildCards == nil {
			x.LeftoverWildCards = make([]uint8, 0)
		}
		if err := typeconv.String2Object(&x.LeftoverWildCards, value); err != nil {
			return err
		}
	case landlord3StateMetaVar.F_first_landlord_pos:
		return typeconv.String2Int8(&x.FirstLandlordPos, value)
	case landlord3StateMetaVar.F_stage:
		if err := typeconv.String2Object(&x.Stage, value); err != nil {
			return err
		}
	case landlord3StateMetaVar.F_first_bider:
		return typeconv.String2Int8(&x.FirstBider, value)
	case landlord3StateMetaVar.F_turn:
		return typeconv.String2Int8(&x.Turn, value)
	case landlord3StateMetaVar.F_landlord:
		return typeconv.String2Int8(&x.Landlord, value)
	case landlord3StateMetaVar.F_doubled:
		if x.Doubled == nil {
			x.Doubled = make([]int8, 0)
		}
		if err := typeconv.String2Object(&x.Doubled, value); err != nil {
			return err
		}
	case landlord3StateMetaVar.F_last_pos:
		return typeconv.String2Int8(&x.LastPos, value)
	case landlord3StateMetaVar.F_last_hands:
		if err := typeconv.String2Object(&x.LastHands, value); err != nil {
			return err
		}
	case landlord3StateMetaVar.F_players:
		if x.Players == nil {
			x.Players = make([]Landlord3PlayerState, 0)
		}
		if err := typeconv.String2Object(&x.Players, value); err != nil {
			return err
		}
	}
	return nil
}

// Meta
type Landlord3StateMeta struct {
	F_playing             string
	F_leftover_wild_cards string
	F_first_landlord_pos  string
	F_stage               string
	F_first_bider         string
	F_turn                string
	F_landlord            string
	F_doubled             string
	F_last_pos            string
	F_last_hands          string
	F_players             string
}

func (Landlord3StateMeta) Name() string     { return "landlord3_state" }
func (Landlord3StateMeta) Key() string      { return "uuid" }
func (Landlord3StateMeta) Fields() []string { return _landlord3_state_fields }

var landlord3StateMetaVar = Landlord3StateMeta{
	F_playing:             "playing",
	F_leftover_wild_cards: "leftover_wild_cards",
	F_first_landlord_pos:  "first_landlord_pos",
	F_stage:               "stage",
	F_first_bider:         "first_bider",
	F_turn:                "turn",
	F_landlord:            "landlord",
	F_doubled:             "doubled",
	F_last_pos:            "last_pos",
	F_last_hands:          "last_hands",
	F_players:             "players",
}

var _landlord3_state_fields = []string{
	landlord3StateMetaVar.F_playing,
	landlord3StateMetaVar.F_leftover_wild_cards,
	landlord3StateMetaVar.F_first_landlord_pos,
	landlord3StateMetaVar.F_stage,
	landlord3StateMetaVar.F_first_bider,
	landlord3StateMetaVar.F_turn,
	landlord3StateMetaVar.F_landlord,
	landlord3StateMetaVar.F_doubled,
	landlord3StateMetaVar.F_last_pos,
	landlord3StateMetaVar.F_last_hands,
	landlord3StateMetaVar.F_players,
}

// Slice
type Landlord3StateSlice []Landlord3State

func NewLandlord3StateSlice(cap int) *Landlord3StateSlice {
	s := Landlord3StateSlice(make([]Landlord3State, 0, cap))
	return &s
}

func (s Landlord3StateSlice) TableMeta() storage.TableMeta { return landlord3StateMetaVar }
func (s Landlord3StateSlice) Len() int                     { return len(s) }
func (s *Landlord3StateSlice) Slice() []Landlord3State     { return []Landlord3State(*s) }

func (s *Landlord3StateSlice) New(table string, index int, key string) (storage.Table, error) {
	for len(*s) <= index {
		*s = append(*s, Landlord3State{})
	}
	x := &((*s)[index])
	err := x.SetKey(key)
	return x, err
}

// View
type Landlord3StateView struct {
	Landlord3State
}

type Landlord3StateViewSlice []Landlord3StateView

func NewLandlord3StateViewSlice(cap int) *Landlord3StateViewSlice {
	s := Landlord3StateViewSlice(make([]Landlord3StateView, 0, cap))
	return &s
}

func (s Landlord3StateViewSlice) TableMeta() storage.TableMeta { return landlord3StateMetaVar }
func (s Landlord3StateViewSlice) Len() int                     { return len(s) }
func (s *Landlord3StateViewSlice) Slice() []Landlord3StateView { return []Landlord3StateView(*s) }

func (s *Landlord3StateViewSlice) New(table string, index int, key string) (storage.Table, error) {
	if table == "landlord3_state" {
		for len(*s) <= index {
			x := Landlord3State{}
			*s = append(*s, Landlord3StateView{Landlord3State: x})
		}
		x := &((*s)[index].Landlord3State)
		err := x.SetKey(key)
		return x, err
	}
	v := &((*s)[index])
	for t, x := range v.tables() {
		if t == table {
			err := x.SetKey(key)
			return x, err
		}
	}
	return nil, storage.ErrTableNotFoundInView
}

var (
	Landlord3StateViewVar  = Landlord3StateView{}
	landlord3StateViewRefs = map[string]storage.View{}
)

func (Landlord3StateView) TableMeta() storage.TableMeta { return landlord3StateMetaVar }
func (Landlord3StateView) Fields() storage.FieldList {
	return storage.FieldSlice(landlord3StateMetaVar.Fields())
}
func (Landlord3StateView) Refs() map[string]storage.View { return landlord3StateViewRefs }
func (view *Landlord3StateView) tables() map[string]storage.Table {
	m := make(map[string]storage.Table)
	m["landlord3_state"] = &view.Landlord3State
	return m
}
